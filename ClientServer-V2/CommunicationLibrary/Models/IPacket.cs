using System.Text;


namespace CommunicationLibrary.Models
{
	using System;
	using CommunicationLibrary.Models.Pairs;

	using Features;

	/// <summary>
	/// Defines properties and methods that a communication packet should have.
	/// </summary>
	public interface IPacket
	{
		/// <summary>
		/// The maximum size of a message. (65535 Bytes)
		/// </summary>
		public static readonly ushort MsgMaxSize = ushort.MaxValue;

		/// <summary>
		/// The size of the header of a packet. (7 Bytes)
		/// </summary>
		public static readonly byte HeaderSize = 7;

		/// <summary>
		/// The number of packets that have been autogenerated.
		/// It is used as a seed for id generation.
		/// </summary>
		public static uint PacketGenCount = 1;

		/// <summary>
		/// The encoding used for the packet.
		/// </summary>
		public static Encoding Encoding;

		/// <summary>
		/// Gets or sets the flags of the packet.
		/// </summary>
		public PacketFlagsPair Flags { get; set; }

		/// <summary>
		/// Gets or sets the size of the packet.
		/// </summary>
		public ushort Size { get; set; }

		/// <summary>
		/// Gets or sets the id of the packet.
		/// </summary>
		public uint Id { get; set; }

		/// <summary>
		/// Gets or sets the bytes of the packet.
		/// </summary>
		public byte[] Bytes { get; set; }

		/// <summary>
		/// Gets or sets the bytes of the packet.
		/// </summary>
		public string Message { get; set; }

		/// <summary>
		/// Clears the packet properties.
		/// </summary>
		public void Clear();

		/// <summary>
		/// Returns the packet as a byte array.
		/// </summary>
		/// <returns>A byte array that represents the packet.</returns>
		public byte[] ToByteArray();

		/// <summary>
		/// Returns the packet as a string.
		/// </summary>
		/// <returns>A string that represents the packet.</returns>
		public string ToString();
	}
}
