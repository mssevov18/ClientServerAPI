using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace CommunicationLibrary
{
    /// <summary>
    /// Defines properties and methods that a communication packet should have.
    /// </summary>
    public interface IPacket
    {
        /// <summary>
        /// The maximum size of a message. (65535 Bytes)
        /// </summary>
        public static readonly ushort __MsgMaxSize = ushort.MaxValue;

        /// <summary>
        /// The size of the header of a packet. (7 Bytes)
        /// </summary>
        public static readonly byte __zHeaderSize = 7;

        /// <summary>
        /// The number of packets that have been autogenerated.
        /// It is used as a seed for id generation.
        /// </summary>
        public static uint PacketGenCount = 1;

        /// <summary>
        /// The encoding used for the packet.
        /// </summary>
        public static Encoding Encoding;

        /// <summary>
        /// Gets or sets the flags of the packet.
        /// </summary>
        public PacketType.Flags Flags { get; set; }

        /// <summary>
        /// Gets or sets the size of the packet.
        /// </summary>
        public ushort Size { get; set; }

        /// <summary>
        /// Gets or sets the id of the packet.
        /// </summary>
        public uint Id { get; set; }

        /// <summary>
        /// Gets or sets the bytes of the packet.
        /// </summary>
        public byte[] Bytes { get; set; }

        /// <summary>
        /// Gets or sets the bytes of the packet.
        /// </summary>
        public string Message { get; set; }

        /// <summary>
        /// Clears the packet properties.
        /// </summary>
        public void Clear();

        /// <summary>
        /// Returns the packet as a byte array.
        /// </summary>
        /// <returns>A byte array that represents the packet.</returns>
        public byte[] ToByteArray();

        /// <summary>
        /// Returns the packet as a FileStruct object.
        /// </summary>
        /// <returns>A FileStruct object that represents the packet.</returns>
        public FileStruct ToFile();

        /// <summary>
        /// Writes the packet bytes to a file in the specified directory and returns the full file path.
        /// </summary>
        /// <param name="directoryPath">The directory path where the file should be created.</param>
        /// <param name="fileName">The name of the file to be created (optional). If not specified, a random file name will be generated.</param>
        /// <returns>The full file path of the created file.</returns>
        public string WriteToFile(string directoryPath, string fileName = null);

        /// <summary>
        /// Returns the packet as a string.
        /// </summary>
        /// <returns>A string that represents the packet.</returns>
        public string ToString();
    }
}
